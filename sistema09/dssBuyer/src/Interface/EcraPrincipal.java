package Interface;

import Negocio.BuyerException;
import Negocio.GestaoNegocios.Negocio;
import Negocio.GestaoNegocios.Troca;
import Negocio.GestaoProdutos.Produto;
import Negocio.GestaoUtilizadores.Administrador;
import Negocio.GestaoUtilizadores.Utilizador;
import Negocio.dssBuyer;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import javax.swing.DefaultListModel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author helder
 */
public class EcraPrincipal extends javax.swing.JFrame implements Observer {
    
    private dssBuyer dssBuyer;
    private Utilizador utilizador;
    private ArrayList<Produto> listaProdutos;
    private ArrayList<Produto> listaProdutosInseridos;
    private ArrayList<Negocio> listaCompras;
    private ArrayList<Negocio> listaVendas;
    private ArrayList<Troca> listaTrocas;
    private ArrayList<Utilizador> listaUtilizadores;

    /**
     * Creates new form NewJFrame
     */
    public EcraPrincipal() {
        try {
            DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());
            DriverManager.setLoginTimeout(1);
            Connection conn = DriverManager.getConnection ("jdbc:oracle:thin:@192.168.123.129:1158:BD","trabalho", "trabalho");
            conn.close();
            this.dssBuyer = new dssBuyer();
            this.dssBuyer.addObserver(this);
            initComponents();
            this.tabbedpane.setEnabledAt(1, false);
            this.tabbedpane.setEnabledAt(2, false);
            this.tabbedpane.setEnabledAt(3, false);
            this.tabbedpane.setEnabledAt(4, false);
            this.tabbedpane.setEnabledAt(5, false);
            this.tabbedpane.setEnabledAt(6, false);
            this.utilizador = null;
            this.listaProdutos = null;
            this.listaProdutosInseridos = null;
            this.listaCompras = null;
            this.listaVendas = null;
            this.listaTrocas = null;
            this.listaUtilizadores = null;
            this.listaProdutos();
        }
        catch (SQLException e) {
            javax.swing.JOptionPane.showMessageDialog(this, "O sistema não pode iniciar porque não foi possivel ligar à base de dados...");
            System.exit(0);
            this.dispose();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        logout = new javax.swing.JButton();
        login = new javax.swing.JButton();
        bemVindo = new javax.swing.JLabel();
        tabbedpane = new javax.swing.JTabbedPane();
        areaProdutos = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        textoPesquisar = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        produtos = new javax.swing.JList();
        comprar = new javax.swing.JButton();
        titulo = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        descricao = new javax.swing.JTextArea();
        preco = new javax.swing.JLabel();
        quantidade = new javax.swing.JLabel();
        vendedor = new javax.swing.JLabel();
        areaUtilizador = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        nomeUtilizador = new javax.swing.JTextField();
        emailUtilizador = new javax.swing.JTextField();
        moradaUtilizador = new javax.swing.JTextField();
        codUtilizador = new javax.swing.JTextField();
        classificacaoUtilizador = new javax.swing.JTextField();
        localidadeUtilizador = new javax.swing.JTextField();
        P1 = new javax.swing.JLabel();
        P2 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        alterarPassword = new javax.swing.JButton();
        jPasswordField1 = new javax.swing.JPasswordField();
        jPasswordField2 = new javax.swing.JPasswordField();
        alterarDados = new javax.swing.JButton();
        atualizarDados = new javax.swing.JButton();
        areaCompras = new javax.swing.JPanel();
        areaComprasTitulo = new javax.swing.JLabel();
        areaComprasQuantidade = new javax.swing.JLabel();
        areaComprasMontante = new javax.swing.JLabel();
        areaComprasVendedor = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        areaComprasFeedVendedor = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        areaComprasFeedComprador = new javax.swing.JTextArea();
        feedComprador = new javax.swing.JButton();
        jScrollPane12 = new javax.swing.JScrollPane();
        areaComprasLista = new javax.swing.JList();
        areaVendas = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        areaVendasLista = new javax.swing.JList();
        areaVendasTitulo = new javax.swing.JLabel();
        areaVendasQuantidade = new javax.swing.JLabel();
        areaVendasMontante = new javax.swing.JLabel();
        areaVendasComprador = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        areaVendasFeedVendedor = new javax.swing.JTextArea();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        areaVendasFeedComprador = new javax.swing.JTextArea();
        feedVendedor = new javax.swing.JButton();
        areaStock = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        actualizarStock = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        produtosInseridos = new javax.swing.JList();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        stockTitulo = new javax.swing.JTextField();
        stockPreco = new javax.swing.JTextField();
        stockQuantidade = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        stockDescricao = new javax.swing.JTextArea();
        stockActualizarInfo = new javax.swing.JButton();
        stockModificar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        areaPropostas = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        areaPropostasLista = new javax.swing.JList();
        areaPropostasEmissor = new javax.swing.JLabel();
        areaPropostasProdutoEmissor = new javax.swing.JLabel();
        areaPropostasReceptor = new javax.swing.JLabel();
        areaPropostasProdutoReceptor = new javax.swing.JLabel();
        areaPropostasEstado = new javax.swing.JLabel();
        areaPropostasAceitar = new javax.swing.JButton();
        areaPropostasRejeitar = new javax.swing.JButton();
        areaAdmin = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        areaAdminLista = new javax.swing.JList();
        areaAdminBloquear = new javax.swing.JButton();
        areaAdminDesbloquear = new javax.swing.JButton();
        areaAdminTexto = new javax.swing.JTextField();
        areaAdminNome = new javax.swing.JLabel();
        areaAdminID = new javax.swing.JLabel();
        newreg = new javax.swing.JButton();

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        logout.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        logout.setText("Logout");
        logout.setEnabled(false);
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        login.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        login.setText("Login");
        login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginActionPerformed(evt);
            }
        });

        bemVindo.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        bemVindo.setText("Bem-vindo");

        tabbedpane.setBackground(new java.awt.Color(255, 255, 255));
        tabbedpane.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        tabbedpane.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        areaProdutos.setBackground(new java.awt.Color(255, 255, 255));
        areaProdutos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel2.setText("Pesquisar produto:");

        textoPesquisar.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        textoPesquisar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textoPesquisarKeyReleased(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        jButton4.setText("Pesquisar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        produtos.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        produtos.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                produtosValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(produtos);

        comprar.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        comprar.setText("Comprar");
        comprar.setEnabled(false);
        comprar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comprarActionPerformed(evt);
            }
        });

        titulo.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        titulo.setText("Titulo");

        jScrollPane3.setBorder(null);
        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        descricao.setEditable(false);
        descricao.setColumns(20);
        descricao.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        descricao.setLineWrap(true);
        descricao.setRows(5);
        descricao.setText("Descricao");
        descricao.setBorder(null);
        jScrollPane3.setViewportView(descricao);

        preco.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        preco.setText("Preco");

        quantidade.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        quantidade.setText("Quantidade");

        vendedor.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        vendedor.setText("Vendedor");

        org.jdesktop.layout.GroupLayout areaProdutosLayout = new org.jdesktop.layout.GroupLayout(areaProdutos);
        areaProdutos.setLayout(areaProdutosLayout);
        areaProdutosLayout.setHorizontalGroup(
            areaProdutosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(areaProdutosLayout.createSequentialGroup()
                .addContainerGap()
                .add(areaProdutosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(areaProdutosLayout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 311, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(areaProdutosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, areaProdutosLayout.createSequentialGroup()
                                .add(0, 0, Short.MAX_VALUE)
                                .add(comprar))
                            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                            .add(areaProdutosLayout.createSequentialGroup()
                                .add(areaProdutosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(areaProdutosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                        .add(titulo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                                        .add(preco, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .add(quantidade)
                                    .add(vendedor))
                                .add(0, 0, Short.MAX_VALUE))))
                    .add(areaProdutosLayout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(textoPesquisar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 245, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton4)))
                .addContainerGap())
        );
        areaProdutosLayout.setVerticalGroup(
            areaProdutosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, areaProdutosLayout.createSequentialGroup()
                .addContainerGap()
                .add(areaProdutosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(textoPesquisar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton4))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(areaProdutosLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                    .add(areaProdutosLayout.createSequentialGroup()
                        .add(titulo)
                        .add(18, 18, 18)
                        .add(preco)
                        .add(18, 18, 18)
                        .add(quantidade)
                        .add(18, 18, 18)
                        .add(vendedor)
                        .add(18, 18, 18)
                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 154, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(comprar)
                        .add(0, 44, Short.MAX_VALUE)))
                .addContainerGap())
        );

        tabbedpane.addTab("Produtos", areaProdutos);

        areaUtilizador.setBackground(new java.awt.Color(255, 255, 255));
        areaUtilizador.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        areaUtilizador.setFocusable(false);

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel1.setText("Nome:");

        jLabel3.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel3.setText("Email:");

        jLabel4.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel4.setText("Morada:");

        jLabel5.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel5.setText("Cod. postal:");

        jLabel6.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel6.setText("Classificação:");

        nomeUtilizador.setEditable(false);
        nomeUtilizador.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N

        emailUtilizador.setEditable(false);
        emailUtilizador.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N

        moradaUtilizador.setEditable(false);
        moradaUtilizador.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N

        codUtilizador.setEditable(false);
        codUtilizador.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N

        classificacaoUtilizador.setEditable(false);
        classificacaoUtilizador.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N

        localidadeUtilizador.setEditable(false);
        localidadeUtilizador.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N

        P1.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        P1.setText("Nova password:");

        P2.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        P2.setText("Confirmar nova password:");

        jButton8.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        jButton8.setText("Alterar password");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        alterarPassword.setText("Alterar");
        alterarPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alterarPasswordActionPerformed(evt);
            }
        });

        alterarDados.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        alterarDados.setText("Alterar dados");
        alterarDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alterarDadosActionPerformed(evt);
            }
        });

        atualizarDados.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        atualizarDados.setText("Atualizar");
        atualizarDados.setEnabled(false);
        atualizarDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarDadosActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout areaUtilizadorLayout = new org.jdesktop.layout.GroupLayout(areaUtilizador);
        areaUtilizador.setLayout(areaUtilizadorLayout);
        areaUtilizadorLayout.setHorizontalGroup(
            areaUtilizadorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(areaUtilizadorLayout.createSequentialGroup()
                .add(29, 29, 29)
                .add(areaUtilizadorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(alterarPassword)
                    .add(areaUtilizadorLayout.createSequentialGroup()
                        .add(areaUtilizadorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel4)
                            .add(jLabel5)
                            .add(jLabel3)
                            .add(jLabel1)
                            .add(jLabel6))
                        .add(6, 6, 6)
                        .add(areaUtilizadorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, areaUtilizadorLayout.createSequentialGroup()
                                .add(jButton8)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(alterarDados)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(atualizarDados))
                            .add(nomeUtilizador)
                            .add(emailUtilizador)
                            .add(moradaUtilizador)
                            .add(areaUtilizadorLayout.createSequentialGroup()
                                .add(codUtilizador, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 118, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(localidadeUtilizador, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE))
                            .add(classificacaoUtilizador)))
                    .add(areaUtilizadorLayout.createSequentialGroup()
                        .add(areaUtilizadorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(P2)
                            .add(P1))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(areaUtilizadorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jPasswordField1)
                            .add(jPasswordField2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE))))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        areaUtilizadorLayout.setVerticalGroup(
            areaUtilizadorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(areaUtilizadorLayout.createSequentialGroup()
                .add(32, 32, 32)
                .add(areaUtilizadorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(nomeUtilizador, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(areaUtilizadorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(emailUtilizador, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(areaUtilizadorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(moradaUtilizador, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(areaUtilizadorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(codUtilizador, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(localidadeUtilizador, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(22, 22, 22)
                .add(areaUtilizadorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(classificacaoUtilizador, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(areaUtilizadorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(atualizarDados)
                    .add(alterarDados)
                    .add(jButton8))
                .add(20, 20, 20)
                .add(areaUtilizadorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(P1)
                    .add(jPasswordField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(7, 7, 7)
                .add(areaUtilizadorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(P2)
                    .add(jPasswordField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(alterarPassword)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        tabbedpane.addTab("Minha conta", areaUtilizador);

        areaCompras.setBackground(new java.awt.Color(255, 255, 255));
        areaCompras.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        areaComprasTitulo.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        areaComprasTitulo.setText("Titulo");

        areaComprasQuantidade.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        areaComprasQuantidade.setText("Quantidade");

        areaComprasMontante.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        areaComprasMontante.setText("Montante Pago");

        areaComprasVendedor.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        areaComprasVendedor.setText("Vendedor");

        jLabel12.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        jLabel12.setText("Feedback do vendedor:");

        areaComprasFeedVendedor.setEditable(false);
        areaComprasFeedVendedor.setColumns(20);
        areaComprasFeedVendedor.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        areaComprasFeedVendedor.setLineWrap(true);
        areaComprasFeedVendedor.setRows(5);
        jScrollPane7.setViewportView(areaComprasFeedVendedor);

        jLabel13.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        jLabel13.setText("Feedback do comprador:");

        areaComprasFeedComprador.setEditable(false);
        areaComprasFeedComprador.setColumns(20);
        areaComprasFeedComprador.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        areaComprasFeedComprador.setLineWrap(true);
        areaComprasFeedComprador.setRows(5);
        jScrollPane8.setViewportView(areaComprasFeedComprador);

        feedComprador.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        feedComprador.setText("Inserir feedback");
        feedComprador.setEnabled(false);
        feedComprador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedCompradorActionPerformed(evt);
            }
        });

        areaComprasLista.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                areaComprasListaValueChanged(evt);
            }
        });
        jScrollPane12.setViewportView(areaComprasLista);

        org.jdesktop.layout.GroupLayout areaComprasLayout = new org.jdesktop.layout.GroupLayout(areaCompras);
        areaCompras.setLayout(areaComprasLayout);
        areaComprasLayout.setHorizontalGroup(
            areaComprasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(areaComprasLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 260, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(areaComprasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(areaComprasTitulo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(areaComprasQuantidade, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(areaComprasMontante, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jScrollPane7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .add(areaComprasLayout.createSequentialGroup()
                        .add(areaComprasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(areaComprasVendedor)
                            .add(jLabel12)
                            .add(jLabel13))
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jScrollPane8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, areaComprasLayout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(feedComprador)))
                .addContainerGap())
        );
        areaComprasLayout.setVerticalGroup(
            areaComprasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(areaComprasLayout.createSequentialGroup()
                .addContainerGap()
                .add(areaComprasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane12, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
                    .add(areaComprasLayout.createSequentialGroup()
                        .add(areaComprasTitulo)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(areaComprasQuantidade)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(areaComprasMontante)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(areaComprasVendedor)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jLabel12)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jLabel13)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(feedComprador)
                        .add(0, 34, Short.MAX_VALUE)))
                .addContainerGap())
        );

        tabbedpane.addTab("Compras", areaCompras);

        areaVendas.setBackground(new java.awt.Color(255, 255, 255));
        areaVendas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        areaVendasLista.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                areaVendasListaValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(areaVendasLista);

        areaVendasTitulo.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        areaVendasTitulo.setText("Titulo");

        areaVendasQuantidade.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        areaVendasQuantidade.setText("Quantidade");

        areaVendasMontante.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        areaVendasMontante.setText("Montante Pago");

        areaVendasComprador.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        areaVendasComprador.setText("Comprador");

        jLabel15.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        jLabel15.setText("Feedback do vendedor:");

        areaVendasFeedVendedor.setEditable(false);
        areaVendasFeedVendedor.setColumns(20);
        areaVendasFeedVendedor.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        areaVendasFeedVendedor.setLineWrap(true);
        areaVendasFeedVendedor.setRows(5);
        jScrollPane9.setViewportView(areaVendasFeedVendedor);

        jLabel16.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        jLabel16.setText("Feedback do comprador:");

        areaVendasFeedComprador.setEditable(false);
        areaVendasFeedComprador.setColumns(20);
        areaVendasFeedComprador.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        areaVendasFeedComprador.setLineWrap(true);
        areaVendasFeedComprador.setRows(5);
        jScrollPane10.setViewportView(areaVendasFeedComprador);

        feedVendedor.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        feedVendedor.setText("Inserir feedback");
        feedVendedor.setEnabled(false);
        feedVendedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedVendedorActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout areaVendasLayout = new org.jdesktop.layout.GroupLayout(areaVendas);
        areaVendas.setLayout(areaVendasLayout);
        areaVendasLayout.setHorizontalGroup(
            areaVendasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(areaVendasLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 260, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(areaVendasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(areaVendasTitulo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(areaVendasQuantidade, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(areaVendasMontante, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jScrollPane9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .add(areaVendasLayout.createSequentialGroup()
                        .add(areaVendasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(areaVendasComprador)
                            .add(jLabel15)
                            .add(jLabel16))
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jScrollPane10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, areaVendasLayout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(feedVendedor)))
                .addContainerGap())
        );
        areaVendasLayout.setVerticalGroup(
            areaVendasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(areaVendasLayout.createSequentialGroup()
                .addContainerGap()
                .add(areaVendasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(areaVendasLayout.createSequentialGroup()
                        .add(areaVendasTitulo)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(areaVendasQuantidade)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(areaVendasMontante)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(areaVendasComprador)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jLabel15)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jLabel16)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(feedVendedor)
                        .add(0, 34, Short.MAX_VALUE))
                    .add(jScrollPane6))
                .addContainerGap())
        );

        tabbedpane.addTab("Vendas", areaVendas);

        areaStock.setBackground(new java.awt.Color(255, 255, 255));
        areaStock.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton1.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        jButton1.setText("Adicionar produto");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        actualizarStock.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        actualizarStock.setText("Actualizar lista");
        actualizarStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarStockActionPerformed(evt);
            }
        });

        produtosInseridos.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                produtosInseridosValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(produtosInseridos);

        jLabel7.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        jLabel7.setText("Titulo:");

        jLabel8.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        jLabel8.setText("Preco:");

        jLabel9.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        jLabel9.setText("Quantidade:");

        jLabel10.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        jLabel10.setText("Descricao:");

        stockTitulo.setEditable(false);
        stockTitulo.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N

        stockPreco.setEditable(false);
        stockPreco.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N

        stockQuantidade.setEditable(false);
        stockQuantidade.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N

        stockDescricao.setEditable(false);
        stockDescricao.setColumns(20);
        stockDescricao.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        stockDescricao.setLineWrap(true);
        stockDescricao.setRows(5);
        jScrollPane4.setViewportView(stockDescricao);

        stockActualizarInfo.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        stockActualizarInfo.setText("Actualizar");
        stockActualizarInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockActualizarInfoActionPerformed(evt);
            }
        });

        stockModificar.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        stockModificar.setText("Modificar dados");
        stockModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockModificarActionPerformed(evt);
            }
        });

        jButton2.setText("Remover");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout areaStockLayout = new org.jdesktop.layout.GroupLayout(areaStock);
        areaStock.setLayout(areaStockLayout);
        areaStockLayout.setHorizontalGroup(
            areaStockLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(areaStockLayout.createSequentialGroup()
                .add(areaStockLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, areaStockLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jScrollPane2))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, areaStockLayout.createSequentialGroup()
                        .add(jButton1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(actualizarStock)))
                .add(areaStockLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(areaStockLayout.createSequentialGroup()
                        .add(areaStockLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel8)
                            .add(jLabel9)
                            .add(jLabel7)
                            .add(jLabel10))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(areaStockLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(stockTitulo)
                            .add(stockQuantidade)
                            .add(jScrollPane4)
                            .add(stockPreco)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, areaStockLayout.createSequentialGroup()
                        .add(0, 48, Short.MAX_VALUE)
                        .add(jButton2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(stockModificar)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(stockActualizarInfo)))
                .addContainerGap())
        );
        areaStockLayout.setVerticalGroup(
            areaStockLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(areaStockLayout.createSequentialGroup()
                .addContainerGap()
                .add(areaStockLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton1)
                    .add(actualizarStock))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(areaStockLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                    .add(areaStockLayout.createSequentialGroup()
                        .add(areaStockLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel7)
                            .add(stockTitulo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(areaStockLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel8)
                            .add(stockPreco, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(areaStockLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel9)
                            .add(stockQuantidade, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(areaStockLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel10)
                            .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(areaStockLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(stockActualizarInfo)
                            .add(stockModificar)
                            .add(jButton2))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        tabbedpane.addTab("Stock", areaStock);

        areaPropostas.setBackground(new java.awt.Color(255, 255, 255));
        areaPropostas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        areaPropostasLista.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                areaPropostasListaValueChanged(evt);
            }
        });
        jScrollPane11.setViewportView(areaPropostasLista);

        areaPropostasEmissor.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        areaPropostasEmissor.setText("Emissor");

        areaPropostasProdutoEmissor.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        areaPropostasProdutoEmissor.setText("Produto do emissor");

        areaPropostasReceptor.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        areaPropostasReceptor.setText("Receptor");

        areaPropostasProdutoReceptor.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        areaPropostasProdutoReceptor.setText("Produto do receptor");

        areaPropostasEstado.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        areaPropostasEstado.setText("Estado");

        areaPropostasAceitar.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        areaPropostasAceitar.setText("Aceitar");
        areaPropostasAceitar.setEnabled(false);
        areaPropostasAceitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                areaPropostasAceitarActionPerformed(evt);
            }
        });

        areaPropostasRejeitar.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        areaPropostasRejeitar.setText("Rejeitar");
        areaPropostasRejeitar.setEnabled(false);
        areaPropostasRejeitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                areaPropostasRejeitarActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout areaPropostasLayout = new org.jdesktop.layout.GroupLayout(areaPropostas);
        areaPropostas.setLayout(areaPropostasLayout);
        areaPropostasLayout.setHorizontalGroup(
            areaPropostasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(areaPropostasLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 261, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(areaPropostasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(areaPropostasEmissor, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(areaPropostasLayout.createSequentialGroup()
                        .add(areaPropostasAceitar)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(areaPropostasRejeitar)
                        .add(0, 208, Short.MAX_VALUE))
                    .add(areaPropostasProdutoEmissor, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(areaPropostasReceptor, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(areaPropostasProdutoReceptor, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(areaPropostasEstado, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        areaPropostasLayout.setVerticalGroup(
            areaPropostasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(areaPropostasLayout.createSequentialGroup()
                .addContainerGap()
                .add(areaPropostasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(areaPropostasLayout.createSequentialGroup()
                        .add(areaPropostasEmissor)
                        .add(18, 18, 18)
                        .add(areaPropostasProdutoEmissor)
                        .add(18, 18, 18)
                        .add(areaPropostasReceptor)
                        .add(18, 18, 18)
                        .add(areaPropostasProdutoReceptor)
                        .add(18, 18, 18)
                        .add(areaPropostasEstado)
                        .add(18, 18, 18)
                        .add(areaPropostasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(areaPropostasAceitar)
                            .add(areaPropostasRejeitar))
                        .add(0, 227, Short.MAX_VALUE))
                    .add(jScrollPane11))
                .addContainerGap())
        );

        tabbedpane.addTab("Propostas", areaPropostas);

        areaAdmin.setBackground(new java.awt.Color(255, 255, 255));
        areaAdmin.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        areaAdminLista.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                areaAdminListaValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(areaAdminLista);

        areaAdminBloquear.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        areaAdminBloquear.setText("Bloquear");
        areaAdminBloquear.setEnabled(false);
        areaAdminBloquear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                areaAdminBloquearActionPerformed(evt);
            }
        });

        areaAdminDesbloquear.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        areaAdminDesbloquear.setText("Desbloquear");
        areaAdminDesbloquear.setEnabled(false);
        areaAdminDesbloquear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                areaAdminDesbloquearActionPerformed(evt);
            }
        });

        areaAdminTexto.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        areaAdminTexto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                areaAdminTextoKeyReleased(evt);
            }
        });

        areaAdminNome.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        areaAdminNome.setText("Nome");

        areaAdminID.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        areaAdminID.setText("ID");

        org.jdesktop.layout.GroupLayout areaAdminLayout = new org.jdesktop.layout.GroupLayout(areaAdmin);
        areaAdmin.setLayout(areaAdminLayout);
        areaAdminLayout.setHorizontalGroup(
            areaAdminLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(areaAdminLayout.createSequentialGroup()
                .addContainerGap()
                .add(areaAdminLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(areaAdminTexto)
                    .add(jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(areaAdminLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(areaAdminNome)
                    .add(areaAdminID)
                    .add(areaAdminLayout.createSequentialGroup()
                        .add(areaAdminBloquear)
                        .add(18, 18, 18)
                        .add(areaAdminDesbloquear)))
                .addContainerGap(157, Short.MAX_VALUE))
        );
        areaAdminLayout.setVerticalGroup(
            areaAdminLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(areaAdminLayout.createSequentialGroup()
                .addContainerGap()
                .add(areaAdminTexto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(areaAdminLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(areaAdminLayout.createSequentialGroup()
                        .add(areaAdminID)
                        .add(26, 26, 26)
                        .add(areaAdminNome)
                        .add(18, 18, 18)
                        .add(areaAdminLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(areaAdminBloquear)
                            .add(areaAdminDesbloquear)))
                    .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 377, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        tabbedpane.addTab("Admin", areaAdmin);

        newreg.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        newreg.setText("Novo registo");
        newreg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newregActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(tabbedpane)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(bemVindo)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(login)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(logout)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(newreg)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(15, 15, 15)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(bemVindo)
                    .add(login)
                    .add(logout)
                    .add(newreg))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tabbedpane)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setLocation((screenSize.width-dialogSize.width)/2,(screenSize.height-dialogSize.height)/2);
    }// </editor-fold>//GEN-END:initComponents

    private void comprarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comprarActionPerformed
        // TODO add your handling code here:
        Negocio n = new Negocio();
        n.setComprador(this.utilizador);
        Produto p = this.listaProdutos.get(this.produtos.getSelectedIndex());
        n.setProduto(p);
        n.setVendedor(p.getVendedor());
        new EfetuarCompra(this.dssBuyer, n).setVisible(true);
    }//GEN-LAST:event_comprarActionPerformed

    private void newregActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newregActionPerformed
        // TODO add your handling code here:
        new NovoUtilizador(this.dssBuyer).setVisible(true);
    }//GEN-LAST:event_newregActionPerformed

    private void loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginActionPerformed
        // TODO add your handling code here:
        new Login(this, this.dssBuyer).setVisible(true);
    }//GEN-LAST:event_loginActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:
        this.utilizador = null;
        this.actualizaCampos();
    }//GEN-LAST:event_logoutActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        new NovoProduto(this, this.dssBuyer, this.utilizador).setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void actualizarStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarStockActionPerformed
        // TODO add your handling code here:
        this.listaProdutosInseridos = new ArrayList<Produto>();
        DefaultListModel lista = new DefaultListModel();
        for (Produto p: this.utilizador.getProdutosInseridos()) {
            if (!p.isBloqueado()) {
                this.listaProdutosInseridos.add(p);
                lista.addElement(p.getTitulo());
            }
        }
        this.produtosInseridos.setModel(lista);
        this.produtosInseridos.setSelectedIndex(-1);
    }//GEN-LAST:event_actualizarStockActionPerformed

    private void stockModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockModificarActionPerformed
        // TODO add your handling code here:
        this.stockActualizarInfo.setEnabled(true);
        this.stockTitulo.setEditable(true);
        this.stockDescricao.setEditable(true);
        this.stockPreco.setEditable(true);
        this.stockQuantidade.setEditable(true);
    }//GEN-LAST:event_stockModificarActionPerformed

    private void stockActualizarInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockActualizarInfoActionPerformed
        // TODO add your handling code here:
        if (this.produtosInseridos.getSelectedIndex() != -1) {
            Produto p = this.listaProdutosInseridos.get(this.produtosInseridos.getSelectedIndex());
            try {
                p.setTitulo(this.stockTitulo.getText());
                p.setDescricao(this.stockDescricao.getText());
                p.setPreco(Float.parseFloat(this.stockPreco.getText()));
                p.setStock(Integer.parseInt(this.stockQuantidade.getText()));
                this.dssBuyer.actualizaProduto(p);
                this.stockTitulo.setEditable(false);
                this.stockDescricao.setEditable(false);
                this.stockPreco.setEditable(false);
                this.stockQuantidade.setEditable(false);
                this.actualizarStock.setEnabled(false);
                javax.swing.JOptionPane.showMessageDialog(this, "Produto actualizado com sucesso...");
            }
            catch (Exception e) {javax.swing.JOptionPane.showMessageDialog(this, e.getMessage());}
        }
    }//GEN-LAST:event_stockActualizarInfoActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int index = this.produtosInseridos.getSelectedIndex();
        if (index != -1) {
            Produto p = this.listaProdutosInseridos.get(index);
            int opcao = javax.swing.JOptionPane.showConfirmDialog(this, "Tem a certeza que pretende remover o produto "+p.getTitulo()+"?");
            if (opcao == 0) {
                this.dssBuyer.removeProduto(p);
                javax.swing.JOptionPane.showMessageDialog(this, "Produto removido com sucesso...");
                this.actualizarStock.doClick();
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        this.P1.setVisible(true);
        this.P2.setVisible(true);
        this.jPasswordField1.setVisible(true);
        this.jPasswordField2.setVisible(true);
        this.alterarPassword.setVisible(true);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void alterarPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alterarPasswordActionPerformed
        // TODO add your handling code here:
        try {
            String p1 = new String(this.jPasswordField1.getPassword());
            String p2 = new String(this.jPasswordField2.getPassword());
            if (p1.equals("") || p2.equals("")) {
                throw new BuyerException("Tem de preencher todos os campos...");
            }
            if (!p1.equals(p2)) {
                throw new BuyerException("As passwords introduzidas não são iguais...");
            }
            this.dssBuyer.setNewPassword(this.utilizador.getIdUtilizador(), p1);
            javax.swing.JOptionPane.showMessageDialog(this, "Password alterada com sucesso...");
            this.P1.setVisible(false);
            this.P2.setVisible(false);
            this.jPasswordField1.setVisible(false);
            this.jPasswordField2.setVisible(false);
            this.alterarPassword.setVisible(false);
        }
        catch (Exception e) {javax.swing.JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_alterarPasswordActionPerformed

    private void alterarDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alterarDadosActionPerformed
        // TODO add your handling code here:
        this.nomeUtilizador.setEditable(true);
        this.moradaUtilizador.setEditable(true);
        this.codUtilizador.setEditable(true);
        this.localidadeUtilizador.setEditable(true);
        this.atualizarDados.setEnabled(true);
    }//GEN-LAST:event_alterarDadosActionPerformed

    private void atualizarDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarDadosActionPerformed
        // TODO add your handling code here:
        try {
            String nome = this.nomeUtilizador.getText();
            String morada = this.moradaUtilizador.getText();
            String cod = this.codUtilizador.getText();
            String loc = this.localidadeUtilizador.getText();
            if (nome.equals("") || morada.equals("") || cod.equals("") || loc.equals("")) {
                throw new BuyerException("Tem de preencher todos os campos...");
            }
            this.utilizador.setNome(nome);
            this.utilizador.setMorada(morada);
            this.utilizador.setCodPostal(cod);
            this.utilizador.setLocalidade(loc);
            this.dssBuyer.actualizaUtilizador(this.utilizador);
            javax.swing.JOptionPane.showMessageDialog(this, "Dados alterados com sucesso...");
            this.nomeUtilizador.setEditable(false);
            this.moradaUtilizador.setEditable(false);
            this.codUtilizador.setEditable(false);
            this.localidadeUtilizador.setEditable(false);
            this.atualizarDados.setEnabled(false);
        }
        catch (Exception e) {javax.swing.JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_atualizarDadosActionPerformed

    private void feedCompradorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedCompradorActionPerformed
        // TODO add your handling code here:
        int index = this.areaComprasLista.getSelectedIndex();
        if (index >= 0) {
            Negocio n = this.listaCompras.get(index);
            new FeedbackComprador(this.dssBuyer, n).setVisible(true);
        }
    }//GEN-LAST:event_feedCompradorActionPerformed

    private void feedVendedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedVendedorActionPerformed
        // TODO add your handling code here:
        int index = this.areaVendasLista.getSelectedIndex();
        if (index >= 0) {
            Negocio n = this.listaVendas.get(index);
            new FeedbackVendedor(this.dssBuyer, n).setVisible(true);
        }
    }//GEN-LAST:event_feedVendedorActionPerformed

    private void areaComprasListaValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_areaComprasListaValueChanged
        // TODO add your handling code here:
        this.preencheCamposAreaCompras();
    }//GEN-LAST:event_areaComprasListaValueChanged

    private void areaVendasListaValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_areaVendasListaValueChanged
        // TODO add your handling code here:
        this.preencheCamposAreaVendas();
    }//GEN-LAST:event_areaVendasListaValueChanged

    private void produtosInseridosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_produtosInseridosValueChanged
        // TODO add your handling code here:
        this.preencheCamposAreaStock();
    }//GEN-LAST:event_produtosInseridosValueChanged

    private void produtosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_produtosValueChanged
        // TODO add your handling code here:
        if (this.produtos.getSelectedIndex() != -1) {
            Produto p = this.listaProdutos.get(this.produtos.getSelectedIndex());
            this.titulo.setText(p.getTitulo());
            this.descricao.setText("Descricao: \n"+p.getDescricao());
            this.preco.setText(p.getPreco()+"€");
            this.quantidade.setText(p.getStock()+" unidade(s) disponiveis");
            this.vendedor.setText(p.getVendedor().getIdUtilizador()+"("+p.getVendedor().getFeed()+")");
            if (this.utilizador != null) {
                this.comprar.setEnabled(true);
            }
            else {
                this.comprar.setEnabled(false);
            }
        }
        else {
            this.titulo.setText("Titulo");
            this.descricao.setText("Descricao");
            this.preco.setText("Preco");
            this.quantidade.setText("Quantidade");
            this.vendedor.setText("Vendedor");
            this.comprar.setEnabled(false);
        }
    }//GEN-LAST:event_produtosValueChanged

    private void textoPesquisarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textoPesquisarKeyReleased
        // TODO add your handling code here:
        this.procuraProdutos();
    }//GEN-LAST:event_textoPesquisarKeyReleased

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        String criterio = this.textoPesquisar.getText();
        if (criterio.equals("")) {
            this.listaProdutos();
        }
        else {
            try {
                this.listaProdutos(criterio);
                if (this.utilizador != null) {
                    Troca t = this.dssBuyer.tentaTroca(this.listaProdutos, this.listaProdutosInseridos);
                    if (t != null) {
                        String s = "Foi encontrada uma possibilidade de troca do seu produto ";
                        s += t.getProdutoEmissor().getTitulo();
                        s += " pelo produto ";
                        s += t.getProdutoReceptor().getTitulo();
                        s += " do vendedor ";
                        s += t.getProdutoReceptor().getVendedor().toString();
                        s += "\n Deseja aceitar?";
                        int opcao = javax.swing.JOptionPane.showConfirmDialog(this, s);
                        if (opcao == 0) {
                            this.dssBuyer.addTroca(t);
                            javax.swing.JOptionPane.showMessageDialog(this, "A sua proposta foi enviada ao vendedor do produto...");
                        }
                    }
                }
            }
            catch (BuyerException e) {javax.swing.JOptionPane.showMessageDialog(this, e.getMessage());}
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void areaAdminListaValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_areaAdminListaValueChanged
        // TODO add your handling code here:
        this.preencheCamposAreaAdmin();
    }//GEN-LAST:event_areaAdminListaValueChanged

    private void areaAdminTextoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_areaAdminTextoKeyReleased
        // TODO add your handling code here:
        this.areaAdminFiltraUtilizadores();
    }//GEN-LAST:event_areaAdminTextoKeyReleased

    private void areaAdminBloquearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_areaAdminBloquearActionPerformed
        // TODO add your handling code here:
        int index = this.areaAdminLista.getSelectedIndex();
        if (index != -1) {
            Utilizador u = this.listaUtilizadores.get(index);
            this.dssBuyer.bloqueiaUtilizador(u);
            javax.swing.JOptionPane.showMessageDialog(this, "Utilizador bloqueado com sucesso...");
        }
    }//GEN-LAST:event_areaAdminBloquearActionPerformed

    private void areaAdminDesbloquearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_areaAdminDesbloquearActionPerformed
        // TODO add your handling code here:
        int index = this.areaAdminLista.getSelectedIndex();
        if (index != -1) {
            Utilizador u = this.listaUtilizadores.get(index);
            this.dssBuyer.desbloqueiaUtilizador(u);
            javax.swing.JOptionPane.showMessageDialog(this, "Utilizador desbloqueado com sucesso...");
        }
    }//GEN-LAST:event_areaAdminDesbloquearActionPerformed

    private void areaPropostasListaValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_areaPropostasListaValueChanged
        // TODO add your handling code here:
        this.preencheCamposAreaPropostas();
    }//GEN-LAST:event_areaPropostasListaValueChanged

    private void areaPropostasRejeitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_areaPropostasRejeitarActionPerformed
        // TODO add your handling code here:
        int index = this.areaPropostasLista.getSelectedIndex();
        if (index != -1) {
            Troca t = this.listaTrocas.get(index);
            int opcao = javax.swing.JOptionPane.showConfirmDialog(this, "Deseja rejeitar a proposta?");
            if (opcao == 0) {
                t.setEstado("rejeitada");
                this.dssBuyer.atualizaTroca(t);
                javax.swing.JOptionPane.showMessageDialog(this, "Proposta rejeitada com sucesso...");
            }
        }
    }//GEN-LAST:event_areaPropostasRejeitarActionPerformed

    private void areaPropostasAceitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_areaPropostasAceitarActionPerformed
        // TODO add your handling code here:
        int index = this.areaPropostasLista.getSelectedIndex();
        if (index != -1) {
            Troca t = this.listaTrocas.get(index);
            int opcao = javax.swing.JOptionPane.showConfirmDialog(this, "Deseja aceitar a proposta?");
            if (opcao == 0) {
                Negocio n1 = new Negocio();
                Negocio n2 = new Negocio();
                n1.setComprador(t.getEmissor());
                n1.setVendedor(t.getReceptor());
                n1.setProduto(t.getProdutoReceptor());
                n1.setQuantidade(1);
                n1.setMontantePago(t.getProdutoReceptor().getPreco());
                n2.setComprador(t.getReceptor());
                n2.setVendedor(t.getEmissor());
                n2.setProduto(t.getProdutoEmissor());
                n2.setQuantidade(1);
                n2.setMontantePago(t.getProdutoEmissor().getPreco());
                this.dssBuyer.addNegocioTroca(n1, n2);
                t.setEstado("rejeitada");
                this.dssBuyer.atualizaTroca(t);
                javax.swing.JOptionPane.showMessageDialog(this, "Proposta aceite com sucesso...");
            }
        }
    }//GEN-LAST:event_areaPropostasAceitarActionPerformed

    public void setUtilizador(Utilizador u) {
        this.utilizador = u;
        this.actualizaCampos();
    }
    
    public void procuraProdutos() {
        if (this.textoPesquisar.getText().equals("")) {
            this.listaProdutos();
        }
        else {
            try {
                this.listaProdutos(this.textoPesquisar.getText());
            }
            catch (Exception e) {}
        }
    }
    
    public void actualizaCampos() {
        if (this.utilizador != null) {
            this.actualizaCamposComUtilizador();
        }
        else {
            this.actualizaCamposSemUtilizador();
        }
    }
    
    public void actualizaCamposComUtilizador() {
        this.tabbedpane.setEnabledAt(1, true);
        this.tabbedpane.setEnabledAt(2, true);
        this.tabbedpane.setEnabledAt(3, true);
        this.tabbedpane.setEnabledAt(4, true);
        this.tabbedpane.setEnabledAt(5, true);
        if (this.utilizador instanceof Administrador) {
            this.tabbedpane.setEnabledAt(6, true);
        }
        else {
            this.tabbedpane.setEnabledAt(6, false);
        }
        this.login.setEnabled(false);
        this.logout.setEnabled(true);
        this.newreg.setEnabled(false);
        this.bemVindo.setText("Bem-vindo "+this.utilizador.getNome());
        this.nomeUtilizador.setText(this.utilizador.getNome());
        this.emailUtilizador.setText(this.utilizador.getIdUtilizador());
        this.moradaUtilizador.setText(this.utilizador.getMorada());
        this.codUtilizador.setText(this.utilizador.getCodPostal());
        this.localidadeUtilizador.setText(this.utilizador.getLocalidade());
        this.classificacaoUtilizador.setText(""+this.utilizador.getFeed());
        if (this.produtos.getSelectedIndex() != -1) {
            this.comprar.setEnabled(true);
        }
        else {
            this.comprar.setEnabled(false);
        }
        this.P1.setVisible(false);
        this.P2.setVisible(false);
        this.jPasswordField1.setVisible(false);
        this.jPasswordField2.setVisible(false);
        this.alterarPassword.setVisible(false);
        new Thread(new Preenche(this)).start();
    }
    
    public void actualizaCamposSemUtilizador() {
        this.tabbedpane.setEnabledAt(1, false);
        this.tabbedpane.setEnabledAt(2, false);
        this.tabbedpane.setEnabledAt(3, false);
        this.tabbedpane.setEnabledAt(4, false);
        this.tabbedpane.setEnabledAt(5, false);
        this.tabbedpane.setEnabledAt(6, false);
        this.tabbedpane.setSelectedIndex(0);
        this.login.setEnabled(true);
        this.logout.setEnabled(false);
        this.newreg.setEnabled(true);
        this.bemVindo.setText("Bem-vindo");
        this.comprar.setEnabled(false);
        this.atualizaPesquisa();
    }
    
    public void listaProdutos() {
        this.listaProdutos = new ArrayList<Produto>();
        for (Produto p: this.dssBuyer.getProdutos()) {
            if (!p.isBloqueado() && !p.getVendedor().isBloqueado()) {
                if (this.utilizador == null || !p.getVendedor().getIdUtilizador().equals(this.utilizador.getIdUtilizador())) {
                    this.listaProdutos.add(p);
                }
            }
        }
        this.listaProdutosEcra();
    }
    
    public void listaProdutos(String criterio) throws BuyerException {
        this.listaProdutos = new ArrayList<Produto>();
        for (Produto p: this.dssBuyer.procuraProdutos(criterio)) {
            if (!p.isBloqueado() && !p.getVendedor().isBloqueado()) {
                if (this.utilizador == null || !p.getVendedor().getIdUtilizador().equals(this.utilizador.getIdUtilizador())) {
                    this.listaProdutos.add(p);
                }
            }
        }
        this.listaProdutosEcra();
    }
    
    public void listaProdutosEcra() {
        DefaultListModel lista = new DefaultListModel();
        for(Produto p: this.listaProdutos) {
            lista.addElement(p.getTitulo());
        }
        this.produtos.setModel(lista);
        this.produtos.setSelectedIndex(-1);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new EcraPrincipal().setVisible(true);
                }
            });

    }


    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel P1;
    private javax.swing.JLabel P2;
    private javax.swing.JButton actualizarStock;
    private javax.swing.JButton alterarDados;
    private javax.swing.JButton alterarPassword;
    private javax.swing.JPanel areaAdmin;
    private javax.swing.JButton areaAdminBloquear;
    private javax.swing.JButton areaAdminDesbloquear;
    private javax.swing.JLabel areaAdminID;
    private javax.swing.JList areaAdminLista;
    private javax.swing.JLabel areaAdminNome;
    private javax.swing.JTextField areaAdminTexto;
    private javax.swing.JPanel areaCompras;
    private javax.swing.JTextArea areaComprasFeedComprador;
    private javax.swing.JTextArea areaComprasFeedVendedor;
    private javax.swing.JList areaComprasLista;
    private javax.swing.JLabel areaComprasMontante;
    private javax.swing.JLabel areaComprasQuantidade;
    private javax.swing.JLabel areaComprasTitulo;
    private javax.swing.JLabel areaComprasVendedor;
    private javax.swing.JPanel areaProdutos;
    private javax.swing.JPanel areaPropostas;
    private javax.swing.JButton areaPropostasAceitar;
    private javax.swing.JLabel areaPropostasEmissor;
    private javax.swing.JLabel areaPropostasEstado;
    private javax.swing.JList areaPropostasLista;
    private javax.swing.JLabel areaPropostasProdutoEmissor;
    private javax.swing.JLabel areaPropostasProdutoReceptor;
    private javax.swing.JLabel areaPropostasReceptor;
    private javax.swing.JButton areaPropostasRejeitar;
    private javax.swing.JPanel areaStock;
    private javax.swing.JPanel areaUtilizador;
    private javax.swing.JPanel areaVendas;
    private javax.swing.JLabel areaVendasComprador;
    private javax.swing.JTextArea areaVendasFeedComprador;
    private javax.swing.JTextArea areaVendasFeedVendedor;
    private javax.swing.JList areaVendasLista;
    private javax.swing.JLabel areaVendasMontante;
    private javax.swing.JLabel areaVendasQuantidade;
    private javax.swing.JLabel areaVendasTitulo;
    private javax.swing.JButton atualizarDados;
    private javax.swing.JLabel bemVindo;
    private javax.swing.JTextField classificacaoUtilizador;
    private javax.swing.JTextField codUtilizador;
    private javax.swing.JButton comprar;
    private javax.swing.JTextArea descricao;
    private javax.swing.JTextField emailUtilizador;
    private javax.swing.JButton feedComprador;
    private javax.swing.JButton feedVendedor;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JPasswordField jPasswordField2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextField localidadeUtilizador;
    private javax.swing.JButton login;
    private javax.swing.JButton logout;
    private javax.swing.JTextField moradaUtilizador;
    private javax.swing.JButton newreg;
    private javax.swing.JTextField nomeUtilizador;
    private javax.swing.JLabel preco;
    private javax.swing.JList produtos;
    private javax.swing.JList produtosInseridos;
    private javax.swing.JLabel quantidade;
    private javax.swing.JButton stockActualizarInfo;
    private javax.swing.JTextArea stockDescricao;
    private javax.swing.JButton stockModificar;
    private javax.swing.JTextField stockPreco;
    private javax.swing.JTextField stockQuantidade;
    private javax.swing.JTextField stockTitulo;
    private javax.swing.JTabbedPane tabbedpane;
    private javax.swing.JTextField textoPesquisar;
    private javax.swing.JLabel titulo;
    private javax.swing.JLabel vendedor;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        this.listaProdutos();
        this.textoPesquisar.setText("");
        this.actualizaCampos();
    }

    public void preencheAreaCompras() {
        this.listaCompras = new ArrayList<Negocio>();
        DefaultListModel model = new DefaultListModel();
        for (Negocio n: this.utilizador.getCompras()) {
            this.listaCompras.add(n);
            model.addElement(n.getProduto().getTitulo());
        }
        this.areaComprasLista.setModel(model);
        this.areaComprasLista.setSelectedIndex(-1);
    }
    
    public void preencheAreaVendas() {
        this.listaVendas = new ArrayList<Negocio>();
        DefaultListModel model = new DefaultListModel();
        for (Negocio n: this.utilizador.getVendas()) {
            this.listaVendas.add(n);
            model.addElement(n.getProduto().getTitulo());
        }
        this.areaVendasLista.setModel(model);
        this.areaVendasLista.setSelectedIndex(-1);
    }
    
    private void preencheCamposAreaCompras() {
        int index = this.areaComprasLista.getSelectedIndex();
        if (index >= 0) {
            Negocio n = this.listaCompras.get(index);
            this.areaComprasTitulo.setText(n.getProduto().getTitulo());
            this.areaComprasQuantidade.setText("Quantidade: " + n.getQuantidade());
            this.areaComprasMontante.setText("Montante pago: " + n.getMontantePago());
            this.areaComprasVendedor.setText(n.getVendedor().toString());
            this.areaComprasFeedComprador.setText(n.getFeedComprador());
            this.areaComprasFeedVendedor.setText(n.getFeedVendedor());
            if (n.getFeedComprador() == null) {
                this.feedComprador.setEnabled(true);
            }
            else {
                this.feedComprador.setEnabled(false);
            }
        }
        else {
            this.areaComprasTitulo.setText("Titulo");
            this.areaComprasQuantidade.setText("Quantidade");
            this.areaComprasMontante.setText("Montante pago");
            this.areaComprasVendedor.setText("Vendedor");
            this.areaComprasFeedComprador.setText("");
            this.areaComprasFeedVendedor.setText("");
            this.feedComprador.setEnabled(false);
        }
    }
    
    private void preencheCamposAreaVendas() {
        int index = this.areaVendasLista.getSelectedIndex();
        if (index >= 0) {
            Negocio n = this.listaVendas.get(index);
            this.areaVendasTitulo.setText(n.getProduto().getTitulo());
            this.areaVendasQuantidade.setText("Quantidade: " + n.getQuantidade());
            this.areaVendasMontante.setText("Montante pago: " + n.getMontantePago());
            this.areaVendasComprador.setText(n.getComprador().toString());
            this.areaVendasFeedComprador.setText(n.getFeedComprador());
            this.areaVendasFeedVendedor.setText(n.getFeedVendedor());
            if (n.getFeedVendedor() == null) {
                this.feedVendedor.setEnabled(true);
            }
            else {
                this.feedVendedor.setEnabled(false);
            }
        }
        else {
            this.areaVendasTitulo.setText("Titulo");
            this.areaVendasQuantidade.setText("Quantidade");
            this.areaVendasMontante.setText("Montante pago");
            this.areaVendasComprador.setText("Comprador");
            this.areaVendasFeedComprador.setText("");
            this.areaVendasFeedVendedor.setText("");
            this.feedVendedor.setEnabled(false);
        }
    }

    public void preencheAreaStock() {
        this.actualizarStock.doClick();
    }
    
    private void preencheCamposAreaStock() {
        if (this.produtosInseridos.getSelectedIndex() != -1) {
            Produto p = this.listaProdutosInseridos.get(this.produtosInseridos.getSelectedIndex());
            this.stockTitulo.setText(p.getTitulo());
            this.stockTitulo.setEditable(false);
            this.stockPreco.setText(""+p.getPreco());
            this.stockPreco.setEditable(false);
            this.stockQuantidade.setText(""+p.getStock());
            this.stockQuantidade.setEditable(false);
            this.stockDescricao.setText(""+p.getDescricao());
            this.stockDescricao.setEditable(false);
            this.stockActualizarInfo.setEnabled(false);
            this.stockModificar.setEnabled(true);
        }
        else {
            this.stockTitulo.setText("Titulo");
            this.stockTitulo.setEditable(false);
            this.stockPreco.setText("Preco");
            this.stockPreco.setEditable(false);
            this.stockQuantidade.setText("Stock");
            this.stockQuantidade.setEditable(false);
            this.stockDescricao.setText("Descricao");
            this.stockDescricao.setEditable(false);
        }
    }
    
    public void atualizaPesquisa() {
        this.procuraProdutos();
    }
    
    private void preencheCamposAreaAdmin() {
        int index = this.areaAdminLista.getSelectedIndex();
        if (index == -1) {
            this.areaAdminBloquear.setEnabled(false);
            this.areaAdminDesbloquear.setEnabled(false);
            this.areaAdminID.setText("ID");
            this.areaAdminNome.setText("Nome");
        }
        else {
            Utilizador u = this.listaUtilizadores.get(index);
            this.areaAdminID.setText(u.getIdUtilizador());
            this.areaAdminNome.setText(u.getNome());
            if (u.isBloqueado()) {
                this.areaAdminDesbloquear.setEnabled(true);
                this.areaAdminBloquear.setEnabled(false);
            }
            else {
                this.areaAdminBloquear.setEnabled(true);
                this.areaAdminDesbloquear.setEnabled(false);
            }
        }
    }
    
    public void preencheAreaAdmin() {
        DefaultListModel lista = new DefaultListModel();
        this.listaUtilizadores = new ArrayList<Utilizador>();
        for (Utilizador u: this.dssBuyer.getUtilizadores()) {
            this.listaUtilizadores.add(u);
            lista.addElement(u.toString());
        }
        this.areaAdminLista.setModel(lista);
        this.areaAdminLista.setSelectedIndex(-1);
    }
    
    public void areaAdminFiltraUtilizadores() {
        DefaultListModel lista = new DefaultListModel();
        String texto = this.areaAdminTexto.getText();
        if (texto.equals("")) {
            for (Utilizador u: this.listaUtilizadores) {
                lista.addElement(u.toString());
            }
        }
        else {
            for (Utilizador u: this.listaUtilizadores) {
                if (u.getNome().toUpperCase().contains(texto.toUpperCase()) || u.getIdUtilizador().toUpperCase().contains(texto.toUpperCase())) {
                    lista.addElement(u.toString());
                }
            }
        }
        this.areaAdminLista.setModel(lista);
    }
    
    public Utilizador getUtilizador() {
        return this.utilizador;
    }

    private void preencheCamposAreaPropostas() {
        int index = this.areaPropostasLista.getSelectedIndex();
        if (index != -1) {
            Troca t = this.listaTrocas.get(index);
            this.areaPropostasEmissor.setText("Emissor: " + t.getEmissor().toString());
            this.areaPropostasReceptor.setText("Receptor: " + t.getReceptor().toString());
            this.areaPropostasEstado.setText("Estado: " + t.getEstado());
            this.areaPropostasProdutoEmissor.setText("Produto emissor: " + t.getProdutoEmissor().getTitulo());
            this.areaPropostasProdutoReceptor.setText("Produto receptor: " + t.getProdutoReceptor().getTitulo());
            if (t.getEstado().equals("aceite") || t.getEstado().equals("rejeitada")) {
                this.areaPropostasRejeitar.setEnabled(false);
                this.areaPropostasAceitar.setEnabled(false);
            }
            else {
                if (t.getEmissor().getIdUtilizador().equals(this.utilizador.getIdUtilizador())) {
                    this.areaPropostasRejeitar.setEnabled(false);
                    this.areaPropostasAceitar.setEnabled(false);
                }
                else {
                    this.areaPropostasRejeitar.setEnabled(true);
                    this.areaPropostasAceitar.setEnabled(true);
                }
            }
        }
        else {
            this.areaPropostasEmissor.setText("Emissor");
            this.areaPropostasReceptor.setText("Receptor");
            this.areaPropostasEmissor.setText("Estado");
            this.areaPropostasProdutoEmissor.setText("Produto emissor");
            this.areaPropostasProdutoReceptor.setText("Produto receptor");
            this.areaPropostasRejeitar.setEnabled(false);
            this.areaPropostasAceitar.setEnabled(false);
        }
    }
    
    public void preencheAreaPropostas() {
        this.listaTrocas = new ArrayList<Troca>();
        DefaultListModel model = new DefaultListModel();
        for (Troca t: this.utilizador.getPropostasTroca()) {
            this.listaTrocas.add(t);
            model.addElement(t.getIdTroca());
        }
        this.areaPropostasLista.setModel(model);
        this.areaPropostasLista.setSelectedIndex(-1);
    }

}
